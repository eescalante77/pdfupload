import React from 'react';
import { FileUpload, ResumeDisplay, ResumeChecklist } from './components';
import useResumeUpload from './hooks/useResumeUpload';
import './App.css';

const App: React.FC = () => {
  const { uploadResume, resumeData, isLoading, error, errorType } = useResumeUpload();

  const handleFileUpload = async (file: File) => {
    await uploadResume(file);
  };

  const renderErrorIcon = () => {
    switch (errorType) {
      case 'not-pdf':
        return 'üìÑ‚ùå';
      case 'not-resume':
        return 'üìù‚ùå';
      case 'server':
        return 'üñ•Ô∏è‚ùå';
      default:
        return '‚ö†Ô∏è';
    }
  };

  const renderErrorTitle = () => {
    switch (errorType) {
      case 'not-pdf':
        return 'Formato de Archivo Incorrecto';
      case 'not-resume':
        return 'No Es Un Curr√≠culum';
      case 'server':
        return 'Error de Conexi√≥n';
      default:
        return 'Atenci√≥n';
    }
  };

  const renderErrorHelp = () => {
    switch (errorType) {
      case 'not-pdf':
        return 'Este analizador solo puede procesar archivos PDF. Por favor, convierte tu documento a formato PDF e int√©ntalo de nuevo.';
      case 'not-resume':
        return 'Aseg√∫rate de que el documento contiene informaci√≥n t√≠pica de un curr√≠culum como experiencia laboral, educaci√≥n y habilidades. Algunos documentos PDF no son reconocidos como curr√≠culums por nuestro sistema.';
      case 'server':
        return 'Parece que hay un problema de conexi√≥n con nuestro servidor. Por favor, verifica tu conexi√≥n a internet e intenta nuevamente.';
      default:
        return 'Si el problema persiste, prueba con otro documento o vuelve m√°s tarde.';
    }
  };

  return (
    <div className="app-container">
      <header>
        <h1>Analizador de Curr√≠culum</h1>
        <p>Sube tu curr√≠culum para extraer informaci√≥n clave</p>
      </header>
      
      <main>
        <FileUpload 
          onResumeData={handleFileUpload}
          onError={() => {}} // Errors are handled by the hook now
          setIsLoading={() => {}} // Loading state is handled by the hook now
        />
        
        {isLoading && (
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <p>Analizando tu curr√≠culum...</p>
          </div>
        )}
        
        {error && (
          <div className={`error-container error-${errorType}`}>
            <div className="error-icon">{renderErrorIcon()}</div>
            <h3>{renderErrorTitle()}</h3>
            <p>{error}</p>
            <p className="error-help">{renderErrorHelp()}</p>
          </div>
        )}
        
        {resumeData && (
          <>
            <ResumeChecklist resumeData={resumeData} />
            <ResumeDisplay resumeData={resumeData} />
          </>
        )}
      </main>
      
      <footer>
        <p>¬© 2025 Aplicaci√≥n de An√°lisis de Curr√≠culum</p>
      </footer>
    </div>
  );
};

export default App; 